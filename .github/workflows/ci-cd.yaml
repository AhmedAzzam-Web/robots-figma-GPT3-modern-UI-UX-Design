# Continuous Delivery pipeline: build & push image, apply Terraform, deploy to AKS on tag release
name: CD

on:
  push:
    tags:
      - "v*.*"

env:
  PROJECT_NAME: robots-figma
  AZURE_LOCATION: eastus
  TF_WORKING_DIR: infra/terraform
  K8S_DIR: infra/k8s

jobs:
  infra:
    name: Provision Infra with Terraform
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Export outputs
        id: tf
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "acr=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "kubeconfig<<EOF" >> $GITHUB_OUTPUT
          terraform output -raw aks_kube_config >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload infra outputs
        uses: actions/upload-artifact@v4
        with:
          name: infra-outputs
          path: ${{ env.TF_WORKING_DIR }}/terraform.tfstate

  build_push:
    name: Build and Push Image to ACR
    needs: infra
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: vars
        run: echo "version=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Download infra outputs
        uses: actions/download-artifact@v4
        with:
          name: infra-outputs
          path: infra/terraform

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR from Terraform state
        id: acr
        run: echo "acr=$(terraform -chdir=infra/terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT

      - name: Azure CLI - ACR Login
        run: az acr login --name $(echo '${{ steps.acr.outputs.acr }}' | cut -d'.' -f1)

      - name: Build and Push
        run: |
          IMAGE=${{ steps.acr.outputs.acr }}/${{ env.PROJECT_NAME }}:${{ steps.vars.outputs.version }}
          docker build -t $IMAGE -f Dockerfile .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Upload image ref
        uses: actions/upload-artifact@v4
        with:
          name: image-ref
          path: image.txt

  deploy:
    name: Deploy to AKS
    needs: [infra, build_push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download image ref
        uses: actions/download-artifact@v4
        with:
          name: image-ref

      - name: Download infra outputs
        uses: actions/download-artifact@v4
        with:
          name: infra-outputs
          path: infra/terraform

      - name: Read image ref
        id: img
        run: echo "image=$(cat image.txt)" >> $GITHUB_OUTPUT

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          terraform -chdir=infra/terraform output -raw aks_kube_config > ~/.kube/config

      - name: Render manifests with image
        run: |
          ACR_HOST=$(echo ${{ steps.img.outputs.image }} | cut -d'/' -f1)
          TAG=$(echo ${{ steps.img.outputs.image }} | cut -d':' -f2)
          sed -i "s#REPLACE_WITH_ACR#$ACR_HOST#g" infra/k8s/deployment.yaml
          sed -i "s#REPLACE_WITH_TAG#$TAG#g" infra/k8s/deployment.yaml

      - name: Apply manifests
        run: |
          kubectl apply -f infra/k8s/namespace.yaml
          kubectl apply -f infra/k8s/deployment.yaml
          kubectl apply -f infra/k8s/service.yaml
